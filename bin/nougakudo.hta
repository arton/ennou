<html>
<head>
 <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
 <meta http-equiv="Content-Style-Type" content="text/css/" />
 <title>NouGakuDo</title>
 <HTA:APPLICATION ID="nouGakuDoApp" 
  SINGLEINSTANCE="yes"
 />
 <style type="text/css">
div.console {
  margin-top: 0%;
}
div.apps {
  margin-top: 10%;
}
div.misc {
  margin-bottom: 10%;
}
div.footer {
  text-align: right;
  margin-bottom: 0%;
}
 </style>
 <script language="RubyScript.1.9">
require 'ennou'
require 'cgi'
require 'tempfile'
require 'suexec'
require 'fileutils'

WWIDTH = 600
WHEIGHT = 400

NUMBER_OF_PROCESSORS = ENV['NUMBER_OF_PROCESSORS'].to_i
SETTINGS = 'nougakudo.conf'
class Script
  def initialize(script, path)
    @script = script
    @conf = path
    @tempconf = nil
  end
  def script_path()
    File::dirname(@conf)
  end
  def create_conf(numproc)
     t = Tempfile.open('noug')
    @tempconf = t.path + '.ru'
    t.close(true)
    wrote = false
    File.open(@tempconf, 'w') do |fp|
      File.open(@conf, 'r').each_line do |line|
        if line =~ %r|/config/environment|
          fp.puts "require '#{File.expand_path('../config/environment', @conf)}'"
          fp.puts "require 'rack/handler/ennoumu'"
          fp.puts "Rack::Handler::Ennoumu.config :nprocs => #{numproc}"
          wrote = true
        elsif line =~ %r|rack/handler/ennoumu|
          # skip
        elsif line =~ /Rack::Handler::Ennoumu.config/
          # skip
        elsif line =~ /^\s*run\s+/
          unless wrote
            fp.puts "require 'rack/handler/ennoumu'"
            fp.puts "Rack::Handler::Ennoumu.config :nprocs => #{numproc}"
          end
          fp.puts line
        else
          fp.puts line
        end
      end.close
    end
    @tempconf
  end

  def create_env(vhost)
    conf = "#{script_path}/config/environment.rb"
    fp = Tempfile.open('noug')
    fin = File.open(conf, 'r').each_line do |line|
      if line =~ /\AENV\['RAILS_RELATIVE_URL_ROOT\]/
        # skip
      else
        fp.puts line
      end
    end
    unless vhost
      fp.puts "ENV['RAILS_RELATIVE_URL_ROOT'] = '/#{@script}'"
    end
    fp.close
    FileUtils.cp fp.path, conf
  end

  def to_html()
<<EHTML
<ul>
  <li><select id="sel#{@script}"><option value="0" selected>Directory</option><option value="1">Host</option></select><span id="selval#{@script}">#{@script}</span><input type="text" id="vhos#{@script}" maxlength="24" style="visibility:hidden"></li>
  <li>#{CGI.escapeHTML(@conf)}</li>
  <li>Environment <select id="e#{@script}">
       <option value="development">development</option>
       <option value="production">production</option>
       <option value="test">test</option>
    </select></li>
  <li><input type="checkbox" id="d#{@script}">set debugging flags</li>
  <li><input type="checkbox" id="w#{@script}">set warnings flags</li>
  <li><a href="http://localhost/#{@script}/">index</a></li>
  <li># of processes: <select id="c#{@script}">#{create_options}</select></li>
  <li><input type="button" id="run#{@script}" onclick="start_script('#{@script}')" 
             value="Launch" langauge="RubyScript.1.9"></li>
</ul>
EHTML
  end
  def add_event(elem)
    find_and_set(elem, "sel#{@script}") do |elem|
      elem.attachEvent('onchange', Proc.new {
        f = Window.event.srcElement.value == '0'
        Window.document.getElementById("selval#{@script}").style.display = to_display(f)
        Window.document.getElementById("vhos#{@script}").style.visibility = to_visibility(!f)
      })
    end
  end
  def to_visibility(f)
    f ? 'visible' : 'hidden'
  end
  def to_display(f)
    f ? 'inline' : 'none'
  end
  def find_and_set(elem, id, &proc)
    elem.children.each do |c|
      if c.id == id
        proc.call(c)
        return true
      elsif c.children.length > 0
        c.children.each do |cc|
          return true if find_and_set(cc, id, &proc)
        end
      end
    end
    false
  end

  def to_command_args(persistence, command_path, params)
    cmd = ["-C#{command_path}"]
    cmd << "#{command_path}\\rackup"
    cmd << "-d" if params[:debug]
    cmd << "-w" if params[:warn]
    if params[:vhost]
      cmd << "-o #{params[:vhost]}" 
    end
    create_env(params[:vhost])
    cmd << "-p 80"
    cmd << "-E #{params[:env]}"
    if params[:numproc] != '1'
      cmd << "-s Ennoumu"
      if persistence
        cmd << "#{@conf}"
      else
        cmd << "#{create_conf params[:numproc]}"
      end
    else
      cmd << "-s Ennou"
      cmd << "#{@conf}"
    end
    cmd
  end

  def create_options()
    1.upto(NUMBER_OF_PROCESSORS * 2).to_a.map {|i| "<option value=\"#{i}\">#{i}" }.join
  end

  def save(n)
    FileUtils.cp create_conf(n), @conf
  end

  attr_reader :conf
end

@scripts = {}

def init()
  resizeTo WWIDTH, WHEIGHT
  document.getElementById("ennou-version").innerHTML = "Ennou #{Ennou::VERSION}"
  document.getElementById("ruby-version").innerHTML = RUBY_DESCRIPTION
  document.getElementById('ru').attachEvent('onpropertychange', Proc.new { select_ru })
  document.getElementById('save').attachEvent('onclick', Proc.new { save_settings })
end

def add_script(script, conffile)
  if @scripts.include? script
    alert("#{script} was already loaded")
    return
  end
 begin
  @scripts[script] = Script.new(script, conffile)
  row = document.createElement('div')
  row.innerHTML = @scripts[script].to_html
  document.getElementById('apps').appendChild row
  @scripts[script].add_event(row)
 rescue => e
  alert(e.message)
  alert(e.backtrace.join('/'))
 end
end

def select_ru()
  file = document.getElementById('ru').value
  if /^\s*run\s+([^:]+)/ =~ IO::read(file)
    add_script $1.chomp.downcase, file
  else
    alert 'select config.ru'
  end
end

def create_args(script, persistence)
  vhost = nil
  if document.getElementById("sel#{script}").value == '1'
    vhost = document.getElementById("vhos#{script}").value
    if vhost.nil? || vhost.size == 0
      alert('no hostname specified')
      return
    end
  end
  /^\s*(?:"([^"]+)|([^ ]+))/ =~ document.getElementById("nouGakuDoApp").commandLine
  path = File::dirname($1 || $2)
  args = @scripts[script].to_command_args persistence, path, 
    :debug => document.getElementById("d#{script}").checked,
    :warn => document.getElementById("w#{script}").checked,
    :numproc => document.getElementById("c#{script}").value,
    :env => document.getElementById("e#{script}").value,
    :vhost => vhost
  return path, args
end

def start_script(script)
  path, args = create_args(script, false)
  if $DEBUG
    document.getElementById("commandline").innerHTML = CGI.escapeHTML("#{path}\\ruby.exe #{args.join(' ')}")
    document.getElementById("configpath").innerHTML = CGI.escapeHTML(args.last)
  end
  SuExec.exec "#{path}\\ruby.exe", *args
end

def save_settings()
  @scripts.each do |k, scr|
    scr.save(document.getElementById("c#{k}").value)
    path, args = create_args(k, true)
    File.open("#{scr.script_path}/#{k}.bat", 'wb') do |fout|
      fout.puts("set PATH=#{path};%PATH%\r")
      fout.puts("#{path}\\sudo.bat #{path}\\ruby.exe #{args.join(' ')}\r")
    end
  end
end

def cleanup()
  FileUtils.rm(Dir.glob("#{Dir.tmpdir}/noug*.ru"), force:true)
end
 </script>
</head>
<body onload="init()" onunload="cleanup()">
 <div class="console">
  select your config.ru: 
  <input type="file" id="ru" value="select ru">
 </div>
 <div id="apps">
 </div>
 <div class="misc">
   <input type="button" id="save" value="save config">
 </div>
 <div id="message">
  <div id="commandline"></div>
  <div id="configpath"></div>
 </div>
 <div id="footer" class="footer">
  <div id="ennou-version"></div>
  <div id="ruby-version"></div>
 </div>
</body>
</html>
